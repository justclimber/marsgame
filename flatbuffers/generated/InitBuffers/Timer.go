// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package InitBuffers

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Timer struct {
	_tab flatbuffers.Table
}

func GetRootAsTimer(buf []byte, offset flatbuffers.UOffsetT) *Timer {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Timer{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Timer) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Timer) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Timer) State() TimerState {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Timer) MutateState(n TimerState) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *Timer) Value() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Timer) MutateValue(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *Timer) Left() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Timer) MutateLeft(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func TimerStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func TimerAddState(builder *flatbuffers.Builder, state int8) {
	builder.PrependInt8Slot(0, state, 0)
}
func TimerAddValue(builder *flatbuffers.Builder, value int32) {
	builder.PrependInt32Slot(1, value, 0)
}
func TimerAddLeft(builder *flatbuffers.Builder, left int32) {
	builder.PrependInt32Slot(2, left, 0)
}
func TimerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
